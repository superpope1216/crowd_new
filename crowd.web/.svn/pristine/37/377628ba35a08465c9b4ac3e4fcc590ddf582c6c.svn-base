package com.wisedu.crowd.controller.yhgl.login;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wisedu.crowd.common.code.SmsMessageTempleateEnum;
import com.wisedu.crowd.common.exception.ServiceException;
import com.wisedu.crowd.common.util.ConstantsUtil;
import com.wisedu.crowd.common.util.DateUtil;
import com.wisedu.crowd.common.util.SessionUser;
import com.wisedu.crowd.common.util.SessionUserUtil;
import com.wisedu.crowd.common.util.StringUtil;
import com.wisedu.crowd.controller.BaseController;
import com.wisedu.crowd.dto.Result;
import com.wisedu.crowd.entity.yhgl.YhjbxxInfo;
import com.wisedu.crowd.service.messages.SmsSendMessage;
import com.wisedu.crowd.service.yhgl.YhjbxxInfoService;

@Controller
@RequestMapping("register")
public class RegisterController extends BaseController{
	
	@Autowired
	private SmsSendMessage smsSendMessage;
	@Autowired
	@Qualifier("yhjbxxInfoService")
	private YhjbxxInfoService yhjbxxInfoService;
	@RequestMapping("index")
	public String index(){
		return "yhgl/login/register";
	}
	
	@RequestMapping("sendVerification")
	@ResponseBody
	public Result sendVerification(@RequestParam String phone,HttpServletRequest request) throws Exception{
		if(StringUtil.isEmpty(phone)){
			throw new ServiceException("手机号不能为空，请输入！");
		}
		String verification=StringUtil.radomString(4);
		try{
		String content=SmsMessageTempleateEnum.TITLE.getName()+String.format(SmsMessageTempleateEnum.REGISTER.getName(), verification);
		smsSendMessage.sendMessage(phone, content);
		}catch(Exception e){
			throw new ServiceException("发送失败");
		}
		SessionUser sessionUser=new SessionUser(phone, verification, new Date());
		request.getSession().setAttribute(ConstantsUtil.PHONE_VERIFICATION, sessionUser);
		return Result.success();
	}
	@ResponseBody
	@RequestMapping("register")
	public Result register(YhjbxxInfo yhjbxxInfo,String confirmYhmm,String yzm,HttpServletRequest request) throws Exception{
		if(StringUtil.isEmpty(yzm)){
			throw new ServiceException("验证码不能为空，请重新输入！");
		}
//		if(!validateCaptchaCode(request,yhjbxxInfo.getSjh(),yzm))
//		{
//			throw new ServiceException("验证码错误，请重新输入！");
//		}
		yhjbxxInfo.setZcsj(DateUtil.getCurrentDate());
		yhjbxxInfo.setZczip(this.getRemoteHost());
		yhjbxxInfo=yhjbxxInfoService.register(yhjbxxInfo, confirmYhmm,this.createCustomOperateLog());
		request.getSession(true).setAttribute(ConstantsUtil.SESSION_YHJBXX, yhjbxxInfo);
		return Result.success();
	}
	
	 private boolean validateCaptchaCode(HttpServletRequest request, String username, String captchaCode) {
			return SessionUserUtil.validateCaptchaCode(request, "verification", captchaCode);
		}
}

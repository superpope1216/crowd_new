package com.wisedu.crowd.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ExceptionHandler;

import com.alibaba.fastjson.JSONObject;
import com.wisedu.crowd.common.exception.ServiceException;
import com.wisedu.crowd.common.util.ConstantsUtil;
import com.wisedu.crowd.common.util.DateUtil;
import com.wisedu.crowd.dto.Result;
import com.wisedu.crowd.entity.dto.PageParam;
import com.wisedu.crowd.entity.log.CustomOperateLog;
import com.wisedu.crowd.entity.yhgl.YhjbxxInfo;

public class BaseController {
		private static final Logger LOG = LoggerFactory.getLogger(BaseController.class);

	    @Autowired
	    protected  HttpServletRequest request;
	    @ExceptionHandler(Exception.class)
	    public void exceptionHandler(HttpServletRequest request, HttpServletResponse response, Exception exception)
	            throws IOException, ServletException {
	        if (request.getHeader("Accept").contains("application/json")) {
	            response.setCharacterEncoding("UTF-8");
	            response.setContentType("application/json;charset=UTF-8");
	            if (exception instanceof ServiceException) {
	                response.getWriter().append(JSONObject.toJSONString(Result.error(exception.getMessage())));
	            } else {
	                response.getWriter().append(JSONObject.toJSONString(Result.error()));
	            }
	            response.getWriter().flush();
	            response.getWriter().close();
	        } else {
	            String url = "/error/internalError";
	            response.setCharacterEncoding("UTF-8");
	            response.setContentType("text/html;charset=UTF-8");
	            response.sendRedirect(request.getContextPath() + url);
	        }
	    }
	    public CustomOperateLog createCustomOperateLog() throws Exception{
	        CustomOperateLog customOperateLog=new CustomOperateLog();
	        customOperateLog.setCustomIp(getRemoteHost());
	        customOperateLog.setDateTime(DateUtil.getCurrentDateTimeStr());
	        //customOperateLog.setRegisterId(this.getRegisterId());
	        //customOperateLog.setUserId(this.getUserId());
	        customOperateLog.setRegisterId(this.getYhId());
	        customOperateLog.setSjh(this.getSjh());
	        return customOperateLog;
	    }

	    public  String getRemoteHost() {
	        String ip = request.getHeader("x-forwarded-for");
	        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	            ip = request.getHeader("Proxy-Client-IP");
	        }
	        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	            ip = request.getHeader("WL-Proxy-Client-IP");
	        }
	        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	            ip = request.getRemoteAddr();
	        }
	        return ip.equals("0:0:0:0:0:0:0:1") ? "127.0.0.1" : ip;
	    }
	    
	    public YhjbxxInfo getYhjbxx() {
	    	if(request.getSession().getAttribute(ConstantsUtil.SESSION_YHJBXX)!=null){
	    		return (YhjbxxInfo)request.getSession().getAttribute(ConstantsUtil.SESSION_YHJBXX);
	    	}
	        return null;
	    }
	    
	    
	    public String getYhId(){
	    	YhjbxxInfo yhjbxx=this.getYhjbxx();
	    	if(yhjbxx!=null){
	    		return yhjbxx.getWid();
	    	}
	    	return "123";
	    }
	    
	    public String getSjh(){
	    	YhjbxxInfo yhjbxx=this.getYhjbxx();
	    	if(yhjbxx!=null){
	    		return yhjbxx.getSjh();
	    	}
	    	return "123";
	    }
	    
	  
		
}

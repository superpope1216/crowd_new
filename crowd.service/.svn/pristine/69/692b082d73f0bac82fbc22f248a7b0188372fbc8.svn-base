package com.wisedu.crowd.service.rwgl.impl;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.wisedu.crowd.common.code.RwxqlxEnum;
import com.wisedu.crowd.common.code.RwxsEnum;
import com.wisedu.crowd.common.code.RwztStateEnum;
import com.wisedu.crowd.common.code.YesNoEnum;
import com.wisedu.crowd.common.exception.ServiceException;
import com.wisedu.crowd.common.util.DateUtil;
import com.wisedu.crowd.common.util.PageUtil;
import com.wisedu.crowd.common.util.StringUtil;
import com.wisedu.crowd.dao.rwgl.RwjbxxInfoMapper;
import com.wisedu.crowd.dao.rwgl.extend.RwjbxxInfoExtendMapper;
import com.wisedu.crowd.service.dto.DataResult;
import com.wisedu.crowd.entity.dto.QueryCondition;
import com.wisedu.crowd.entity.log.CustomOperateLog;
import com.wisedu.crowd.entity.rwgl.RwjbxxExtInfo;
import com.wisedu.crowd.entity.rwgl.RwjbxxInfo;
import com.wisedu.crowd.entity.rwgl.RwztbglsInfo;
import com.wisedu.crowd.entity.rwgl.extend.RwjbxxInfoExtend;
import com.wisedu.crowd.service.dictionary.DictionaryService;
import com.wisedu.crowd.service.rwgl.RwjbxxExtInfoService;
import com.wisedu.crowd.service.rwgl.RwjbxxInfoService;
import com.wisedu.crowd.service.rwgl.RwztbglsInfoService;

@Service("rwjbxxInfoService")
@Transactional
public class RwjbxxInfoServiceImpl implements RwjbxxInfoService {

	@Autowired
	private RwjbxxInfoMapper rwjbxxInfoMapper;

	@Autowired
	private RwjbxxInfoExtendMapper rwjbxxInfoExtendMapper;

	@Autowired
	private RwjbxxExtInfoService rwjbxxExtInfoService;

	@Autowired
	private DictionaryService dictionaryService;
	
	@Autowired
	private RwztbglsInfoService rwztbglsInfoService;

	@Override
	public DataResult<Integer> deleteByPrimaryKey(String wid) throws ServiceException {
		return DataResult.success(rwjbxxInfoMapper.deleteByPrimaryKey(wid));
	}

	@Override
	public DataResult<Integer> insertSelective(RwjbxxInfo record) throws ServiceException {
		return DataResult.success(rwjbxxInfoMapper.insertSelective(record));
	}

	@Override
	public DataResult<RwjbxxInfo> selectByPrimaryKey(String wid) throws ServiceException {
		return DataResult.success(rwjbxxInfoMapper.selectByPrimaryKey(wid));
	}

	@Override
	public DataResult<Integer> updateByPrimaryKeySelective(RwjbxxInfo record) throws ServiceException {
		return DataResult.success(rwjbxxInfoMapper.updateByPrimaryKeySelective(record));
	}

	/**
	 * 需求必填项检测
	 * 
	 * @param rwjbxxInfo
	 * @throws ServiceException
	 */
	private void checkRwjbxx(RwjbxxInfo rwjbxxInfo) throws ServiceException {
		if (rwjbxxInfo == null) {
			throw new ServiceException("需求不能为空，请重新确认！");
		}
		if (StringUtil.isEmpty(rwjbxxInfo.getRwmc())) {
			throw new ServiceException("需求名称不能为空，请重新确认！");
		}
		if (StringUtil.isEmpty(rwjbxxInfo.getRwxs())) {
			throw new ServiceException("需求分类不能为空，请重新确认！");
		}
		// 开发性质的任务
		if (rwjbxxInfo.getRwxs().equals(RwxsEnum.KF.getCode())) {
			if (StringUtil.isEmpty(rwjbxxInfo.getRwlx())) {
				throw new ServiceException("需求类型不能为空，请重新确认！");
			}
			if (StringUtil.isEmpty(rwjbxxInfo.getSfjj())) {
				throw new ServiceException("是否紧急不能为空，请重新确认！");
			}
			if (RwxqlxEnum.XQ.getCode().equals(rwjbxxInfo.getRwlx())) {
				if (StringUtil.toInt(rwjbxxInfo.getXmysje()) <= 0) {
					throw new ServiceException("需求预算金额不能小于0，请重新确认");
				}
			}
		} else {
			if (StringUtil.toInt(rwjbxxInfo.getXmysje()) <= 0) {
				throw new ServiceException("需求预算金额不能小于0，请重新确认");
			}
		}
		if (StringUtil.isEmpty(rwjbxxInfo.getXmgs())) {
			throw new ServiceException("需求描述不能为空，请重新确认！");
		}
		long zbzq = DateUtil.getDaysBetween(DateUtil.getCurrentDateStr(), DateUtil.formatDate(rwjbxxInfo.getZbjzrq()));
		if (zbzq < 0) {
			throw new ServiceException("招标截至日期不能小于当前日期，请重新确认！");
		}
		long jfzq = DateUtil.getDaysBetween(DateUtil.formatDate(rwjbxxInfo.getZbjzrq()), rwjbxxInfo.getJfrq());
		if (jfzq < 0) {
			throw new ServiceException("交付日期日期不能小于招标截至日期，请重新确认！");
		}

	}

	@Override
	/**
	 * 
	 * @param rwjbxxInfo
	 * @param rwjbxxExtInfo
	 * @param flag
	 *            1保存草稿 2 发布
	 * @param log
	 * @return
	 * @throws ServiceException
	 */
	public DataResult<Integer> publishing(RwjbxxInfo rwjbxxInfo, RwjbxxExtInfo rwjbxxExtInfo, String flag,
			CustomOperateLog log) throws ServiceException {
		checkRwjbxx(rwjbxxInfo);
		RwjbxxInfo saveRwjbxxInfo = new RwjbxxInfo();
		String rwid = "", rwbh = "";
		// 新建
		if (StringUtil.isEmpty(rwjbxxInfo.getWid())) {
			rwid = StringUtil.getUuId();
			rwbh = "123123";
			saveRwjbxxInfo.setCjsj(DateUtil.getCurrentDate());
			saveRwjbxxInfo.setCjzip(log.getCustomIp());
		} else {
			RwjbxxInfo oldRwjbxxInfo = rwjbxxInfoMapper.selectByPrimaryKey(rwjbxxInfo.getWid());
			if (!log.getXqfId().equals(oldRwjbxxInfo.getXqfid())) {
				throw new ServiceException("该需求不是当前用户的需求，请重新确认");
			}
			// 发布
			if ("1".equals(flag)) {
				if (StringUtil.toInt(oldRwjbxxInfo.getXmzt()) > RwztStateEnum.CG.getCode()) {
					throw new ServiceException("该需求状态不满足发布需求状态，请重新确认");
				}

			} else {
				if (StringUtil.toInt(oldRwjbxxInfo.getXmzt()) != RwztStateEnum.CG.getCode()) {
					throw new ServiceException("该需求状态不满足保存草稿需求状态，请重新确认");
				}
			}
			rwid = rwjbxxInfo.getWid();
			rwbh = oldRwjbxxInfo.getRwbh();
		}
		saveRwjbxxInfo.setWid(rwid);
		saveRwjbxxInfo.setRwbh(rwbh);
		saveRwjbxxInfo.setRwmc(rwjbxxInfo.getRwmc());
		saveRwjbxxInfo.setRwxs(rwjbxxInfo.getRwxs());
		saveRwjbxxInfo.setRwlx(rwjbxxInfo.getRwlx());
		saveRwjbxxInfo.setSfjj(rwjbxxInfo.getSfjj());
		saveRwjbxxInfo.setKfkj(rwjbxxInfo.getKfkj());
		saveRwjbxxInfo.setZbjzrq(rwjbxxInfo.getZbjzrq());
		saveRwjbxxInfo.setJfrq(rwjbxxInfo.getJfrq());
		saveRwjbxxInfo.setXmysje(rwjbxxInfo.getXmysje());
		saveRwjbxxInfo.setXmgs(rwjbxxInfo.getXmgs());

		saveRwjbxxInfo.setYwxlb(rwjbxxExtInfo.getYwxbm());
		saveRwjbxxInfo.setXqfid(log.getXqfId());
		saveRwjbxxInfo.setFb(rwjbxxExtInfo.getFb());
		saveRwjbxxInfo
				.setZbzq(DateUtil.getDaysBetween(DateUtil.formatDate(rwjbxxInfo.getZbjzrq()), rwjbxxInfo.getJfrq()));
		// 不是开发任务
		if (!saveRwjbxxInfo.getRwxs().equals(RwxsEnum.KF.getCode())) {
			saveRwjbxxInfo.setRwlx(StringUtil.toShort(RwxqlxEnum.XQ.getCode()));
			saveRwjbxxInfo.setKfkj(null);
			saveRwjbxxInfo.setSfjj(YesNoEnum.NO.getCode());
		}
		// BUG类型的需求项目预算金额默认为0
		if (saveRwjbxxInfo.getRwlx().equals(RwxqlxEnum.BUG.getCode())) {
			saveRwjbxxInfo.setXmysje(0L);
		}
		Map<String, Object> rwxsMap = dictionaryService.selectRwxsByBm(saveRwjbxxInfo.getRwxs());
		Integer xmzt=StringUtil.toInt(RwztStateEnum.CG.getCode());
		if ("1".equals(flag)) {
			if (YesNoEnum.YES.getCode().equals(StringUtil.toStr(rwxsMap.get("SFXQRWLX")))) {
				xmzt=StringUtil.toInt(RwztStateEnum.DSH.getCode());
				
			} else {
				xmzt=StringUtil.toInt(RwztStateEnum.ZBZ.getCode());
			}
		} else {
			xmzt=StringUtil.toInt(RwztStateEnum.CG.getCode());
		}
		saveRwjbxxInfo.setXmzt(xmzt);
		rwjbxxExtInfo.setRwid(rwid);
		if (StringUtil.isEmpty(rwjbxxInfo.getWid())) {
			rwjbxxExtInfo.setWid(StringUtil.getUuId());
			rwjbxxInfoMapper.insertSelective(saveRwjbxxInfo);
			rwjbxxExtInfoService.insertSelective(rwjbxxExtInfo);
		} else {
			rwjbxxInfoMapper.updateByPrimaryKeySelective(saveRwjbxxInfo);
			rwjbxxExtInfoService.updateByPrimaryKeySelective(rwjbxxExtInfo);
		}
		
		//任务状态变更日志
		RwztbglsInfo rwztbglsInfo=new RwztbglsInfo();
		rwztbglsInfo.setWid(StringUtil.getUuId());
		rwztbglsInfo.setCzrip(log.getCustomIp());
		rwztbglsInfo.setCzrxm(log.getXm());
		rwztbglsInfo.setCzsj(DateUtil.getCurrentDate());
		rwztbglsInfo.setShyy("发布需求");
		rwztbglsInfo.setXmid(rwid);
		rwztbglsInfo.setXqfid(log.getXqfId());
		rwztbglsInfo.setZt(StringUtil.toShort(xmzt));
		rwztbglsInfoService.insertSelective(rwztbglsInfo, log);
		return DataResult.success(1);
	}

	/**
	 * 大厅众包专用
	 * 
	 * @param record
	 * @return
	 */
	public DataResult<List<RwjbxxInfoExtend>> selectForCenter(QueryCondition<RwjbxxInfoExtend> record)
			throws ServiceException {
		if (record.getPageInfo() != null) {
			Page<RwjbxxInfoExtend> page = PageHelper.startPage(record.getPageInfo().getPageNum(),
					record.getPageInfo().getPageSize());
			List<RwjbxxInfoExtend> datas = rwjbxxInfoExtendMapper.selectForCenter(record);

			DataResult<List<RwjbxxInfoExtend>> dataResult = DataResult.success(datas);
			dataResult.setPageInfo(PageUtil.changePageInfo(page));
			return dataResult;
		} else {
			return DataResult.success(rwjbxxInfoExtendMapper.selectForCenter(record));
			
		}
	}

	@Override
	public DataResult<List<RwjbxxInfoExtend>> selectDisplayByCondition(QueryCondition<RwjbxxInfoExtend> record)
			throws ServiceException {
		if (record.getPageInfo() != null) {
			Page<RwjbxxInfoExtend> page = PageHelper.startPage(record.getPageInfo().getPageNum(),
					record.getPageInfo().getPageSize());
			List<RwjbxxInfoExtend> datas = rwjbxxInfoExtendMapper.selectDisplayByCondition(record);

			DataResult<List<RwjbxxInfoExtend>> dataResult = DataResult.success(datas);
			dataResult.setPageInfo(PageUtil.changePageInfo(page));
			return dataResult;
		} else {
			return DataResult.success(rwjbxxInfoExtendMapper.selectDisplayByCondition(record));
			
		}
	}

	@Override
	public DataResult<Integer> selectCountByCondition(QueryCondition<RwjbxxInfoExtend> record, CustomOperateLog log) throws ServiceException{
		return DataResult.success(rwjbxxInfoExtendMapper.selectCountByCondition(record));
	}

	@Override
	public DataResult<Integer> reback(String rwid,String shly, CustomOperateLog log) throws ServiceException {
		DataResult<RwjbxxInfo> rwjbxxInfoData=this.selectByPrimaryKey(rwid);
		if(StringUtil.toStr(shly).equals("")){
			throw new ServiceException("收回需求的理由不能为空，请重新确认");
		}
		if(rwjbxxInfoData.getDatas()==null){
			throw new ServiceException("该需求不存在，请重新确认");
		}
		RwjbxxInfo rwjbxxInfoOld=rwjbxxInfoData.getDatas();
		if(StringUtil.toInt(rwjbxxInfoOld.getXmzt())!=RwztStateEnum.DSH.getCode()){
			throw new ServiceException("该需求状态不是待审核装惕啊，无法收回该需求");
		}
		if(!log.getXqfId().equals(rwjbxxInfoOld.getXqfid())){
			throw new ServiceException("该需求状态不是您发布的需求，无法收回该需求");
		}
		
		RwjbxxInfo rwjbxxInfoSave=new RwjbxxInfo();
		rwjbxxInfoSave.setWid(rwid);
		rwjbxxInfoSave.setCjsj(DateUtil.getCurrentDate());
		rwjbxxInfoSave.setCjzip(log.getCustomIp());
		rwjbxxInfoSave.setXmzt(RwztStateEnum.CG.getCode());
		this.updateByPrimaryKeySelective(rwjbxxInfoSave);
		//任务状态变更日志
		RwztbglsInfo rwztbglsInfo=new RwztbglsInfo();
		rwztbglsInfo.setWid(StringUtil.getUuId());
		rwztbglsInfo.setCzrip(log.getCustomIp());
		rwztbglsInfo.setCzrxm(log.getXm());
		rwztbglsInfo.setCzsj(DateUtil.getCurrentDate());
		rwztbglsInfo.setShyy("收回需求："+shly);
		rwztbglsInfo.setXmid(rwid);
		rwztbglsInfo.setXqfid(log.getXqfId());
		rwztbglsInfo.setZt(StringUtil.toShort(RwztStateEnum.CG.getCode()));
		rwztbglsInfoService.insertSelective(rwztbglsInfo, log);
		return DataResult.success(1);
	}

	@Override
	public DataResult<Integer> modifyDate(String rwid, String zbjzrq, String jfrq, CustomOperateLog log)
			throws ServiceException {
		DataResult<RwjbxxInfo> rwjbxxInfoData=this.selectByPrimaryKey(rwid);
		if(rwjbxxInfoData.getDatas()==null){
			throw new ServiceException("该需求不存在，请重新确认");
		}
		
		RwjbxxInfo rwjbxxInfo=rwjbxxInfoData.getDatas();
		if(!log.getXqfId().equals(rwjbxxInfo.getXqfid())){
			throw new ServiceException("该需求状态不是您发布的需求，无法收回该需求");
		}
		
		long zbzq = DateUtil.getDaysBetween(DateUtil.getCurrentDateStr(), DateUtil.formatDate(rwjbxxInfo.getZbjzrq()));
		if (zbzq < 0) {
			throw new ServiceException("招标截至日期不能小于当前日期，请重新确认！");
		}
		long jfzq = DateUtil.getDaysBetween(DateUtil.formatDate(rwjbxxInfo.getZbjzrq()), rwjbxxInfo.getJfrq());
		if (jfzq < 0) {
			throw new ServiceException("交付日期日期不能小于招标截至日期，请重新确认！");
		}
		
		RwjbxxInfo saveRwjbxxInfo=new RwjbxxInfo();
		saveRwjbxxInfo.setWid(rwid);
		saveRwjbxxInfo.setZbjzrq(DateUtil.parseDate(zbjzrq));
		saveRwjbxxInfo.setJfrq(jfrq);
		this.updateByPrimaryKeySelective(saveRwjbxxInfo);
		return DataResult.success(1);
	}

	@Override
	public DataResult<Integer> delete(String rwid, CustomOperateLog log) throws ServiceException {
		DataResult<RwjbxxInfo> rwjbxxInfoData=this.selectByPrimaryKey(rwid);
		if(rwjbxxInfoData.getDatas()==null){
			throw new ServiceException("该需求不存在，请重新确认");
		}
		
		RwjbxxInfo rwjbxxInfo=rwjbxxInfoData.getDatas();
		if(!log.getXqfId().equals(rwjbxxInfo.getXqfid())){
			throw new ServiceException("该需求状态不是您发布的需求，无法删除该需求");
		}
		
		if(RwztStateEnum.CG.getCode()!=StringUtil.toInt(rwjbxxInfo.getXmzt())){
			throw new ServiceException("该需求状态不是草稿状态，无法删除该需求");
		}
		return this.deleteByPrimaryKey(rwid);
	}
	
	

}

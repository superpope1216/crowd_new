package com.wisedu.crowd.task.data;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.wisedu.crowd.common.code.RwztStateEnum;
import com.wisedu.crowd.common.util.CommonUtil;
import com.wisedu.crowd.common.util.ConditionUtil;
import com.wisedu.crowd.common.util.DateUtil;
import com.wisedu.crowd.common.util.DecimalUtil;
import com.wisedu.crowd.common.util.StringUtil;
import com.wisedu.crowd.entity.data.DataDelayInfo;
import com.wisedu.crowd.entity.data.extend.DataDelayInfoExtend;
import com.wisedu.crowd.entity.dto.PageInfo;
import com.wisedu.crowd.entity.log.CustomOperateLog;
import com.wisedu.crowd.entity.rwgl.extend.RwjbxxInfoExtend;
import com.wisedu.crowd.entity.rwgl.extend.RwztbglsInfoExtend;
import com.wisedu.crowd.service.data.DataDelayInfoService;
import com.wisedu.crowd.service.rwgl.RwjbxxInfoService;
import com.wisedu.crowd.service.rwgl.RwztbglsInfoService;

/**
 * 延期任务统计
 * @author wisedu
 *
 */
@Component
@Transactional
public class DataDelayInfoTask {
	
	private Logger LOG=LoggerFactory.getLogger(DataDelayInfoTask.class);
	
	@Autowired
	private RwjbxxInfoService rwjbxxInfoService;
	@Autowired
	private RwztbglsInfoService rwztbglsInfoService;
	
	@Autowired
	private DataDelayInfoService dataDelayInfoService;
	@Scheduled(cron = "0 0/1 *  * * ? ")
	public void run() {
		String begMonth="2016-01";
		String endMonth="2018-02";
		int dd=DateUtil.getMonthsBetween(endMonth, begMonth);
		for(int i=0;i<dd;i++){
			String begMonth2=DateUtil.addMonth(begMonth, i);
			try{
				run(begMonth2);
			}
			catch(Exception e){
				LOG.error("====延期任务详情自动任务异常===", e);
			}
		}
	}
	
	public void run(String month) throws Exception{
		CustomOperateLog log=new CustomOperateLog();
		RwjbxxInfoExtend queryRwjbxxInfoExtend = new RwjbxxInfoExtend();
		queryRwjbxxInfoExtend.setNeedDelaySum(true);
		queryRwjbxxInfoExtend.setDelaySumMonth(month);
		int pageNum = 1;
		int pageSize = 500;
		boolean needQuery = true;
		String cDate=DateUtil.addDate(DateUtil.getCurrentDateStr(), -1);//计算的日期
		while (needQuery) {
			List<RwjbxxInfoExtend> datas = rwjbxxInfoService.selectDisplayByCondition(ConditionUtil.createCondition(queryRwjbxxInfoExtend, new PageInfo(pageSize, pageNum))).getDatas();
			pageNum++;
			if(CommonUtil.isNotEmptyList(datas)){
				for(RwjbxxInfoExtend rwjbxxInfoExtend:datas){
					if(StringUtil.isEmpty(rwjbxxInfoExtend.getJfrq())){
						continue;
					}
					long days=0;
					if(RwztStateEnum.KFZ.getCode()==rwjbxxInfoExtend.getXmzt()){
						days=this.getDays(cDate, rwjbxxInfoExtend.getJfrq());
						saveNotSqys(rwjbxxInfoExtend,days,cDate,rwjbxxInfoExtend.getJfrq(),cDate,log);
					}else{
						RwztbglsInfoExtend queryRwztbglsInfoExtend=new RwztbglsInfoExtend();
						queryRwztbglsInfoExtend.setXmid(rwjbxxInfoExtend.getWid());
						queryRwztbglsInfoExtend.setZt(StringUtil.toShort(RwztStateEnum.YSZ.getCode()));
						List<RwztbglsInfoExtend> rwztbglsDatas=rwztbglsInfoService.selectByCondition(ConditionUtil.createCondition(queryRwztbglsInfoExtend), log).getDatas();
						if(CommonUtil.isNotEmptyList(rwztbglsDatas)){
							saveSqys(rwjbxxInfoExtend,rwztbglsDatas,cDate,log);
						}else{
							days=this.getDays(DateUtil.getCurrentDateStr(), rwjbxxInfoExtend.getJfrq());
							saveNotSqys(rwjbxxInfoExtend,days,cDate,rwjbxxInfoExtend.getJfrq(),cDate,log);
						}
					}
					
				}
			}else{
				needQuery=false;
			}
		}
	}
	
	/**
	 * 保存申请验收的延期
	 * @param rwjbxxInfoExtend
	 * @param log
	 */
	private void saveSqys(RwjbxxInfoExtend rwjbxxInfoExtend,List<RwztbglsInfoExtend> rwztbglsDatas,String currentDate,CustomOperateLog log) throws Exception{
		String czsj=DateUtil.formatDate(rwztbglsDatas.get(0).getCzsj());
		String ptyqjfrq=rwjbxxInfoExtend.getJfrq();
		if(rwztbglsDatas.size()==1){//1次提交验收
			
		}else{
			ptyqjfrq=getNewJfrq(StringUtil.toDouble(rwjbxxInfoExtend.getZbje()),rwjbxxInfoExtend.getJfrq());
			
		}
		long days=getDays(czsj,ptyqjfrq);//总延期天数
		
		saveNotSqys(rwjbxxInfoExtend,days,czsj,ptyqjfrq,currentDate,log);
	}
	
	private long getDays(String sqysjs,String jfrq) throws Exception{
		return DateUtil.getDaysBetween(sqysjs, jfrq);
	}
	/**
	 * 保存没有申请验收的延期
	 * @param rwjbxxInfoExtend
	 */
	private void saveNotSqys(RwjbxxInfoExtend rwjbxxInfoExtend,long days,String sqyssj,String ptjfrq,String currentDate,CustomOperateLog log){
		
		if(days<0){//延期了
			String currentMonth=DateUtil.formatMonth(DateUtil.parseDate(currentDate));
			int monthDelay=calMonthDelayDay(ptjfrq,sqyssj,currentMonth);
			DataDelayInfoExtend queryDataDelayInfoExtend=new DataDelayInfoExtend();
			queryDataDelayInfoExtend.setRwid(rwjbxxInfoExtend.getWid());
			queryDataDelayInfoExtend.setMonth(currentMonth);
			List<DataDelayInfoExtend> dataDelays=dataDelayInfoService.selectByCondition(ConditionUtil.createCondition(queryDataDelayInfoExtend), log).getDatas();
			DataDelayInfo saveDataDelayInfo=new DataDelayInfo();
			saveDataDelayInfo.setPtgzjfrq(ptjfrq);
			saveDataDelayInfo.setJfrq(rwjbxxInfoExtend.getJfrq());
			saveDataDelayInfo.setSqyssj(sqyssj);
			if(CommonUtil.isNotEmptyList(dataDelays)){
				saveDataDelayInfo.setDelayDay(DecimalUtil.toDecimal(monthDelay));
				
				saveDataDelayInfo.setMonth(currentMonth);
				dataDelayInfoService.updateByPrimaryKeySelective(saveDataDelayInfo, log);
			}else{
				saveDataDelayInfo.setWid(StringUtil.getUuId());
				
				saveDataDelayInfo.setKfzid(rwjbxxInfoExtend.getKfzid());
				saveDataDelayInfo.setMonth(currentMonth);
				saveDataDelayInfo.setRwid(rwjbxxInfoExtend.getWid());
				
				saveDataDelayInfo.setDelayDay(DecimalUtil.toDecimal(monthDelay));
				saveDataDelayInfo.setXqfid(rwjbxxInfoExtend.getXqfid());
				dataDelayInfoService.insertSelective(saveDataDelayInfo, log);
			}
		}
	}
	
	/**
	 * 获取交付日期
	 * @param firstYs
	 * @param zbje
	 * @param jfrq
	 * @return
	 * @throws Exception
	 */
	private String getNewJfrq(double zbje, String jfrq) throws Exception{
		int subDays = 0;
		
			if(zbje < 1000){//1000元以下一天
				subDays = 1;
			}else if(zbje < 5000){//1000元-5000元两天
				subDays = 2;
			}else{//5000元以上三天
				subDays = 3;
			}
		return DateUtil.addDate(jfrq, subDays);
	}
	
	public  static  int calMonthDelayDay(String jfrq,String currentDate,String currentMonth){
		long days=DateUtil.getDaysBetween(jfrq, currentDate);
		int delayDay=0;
		for(long i=0;i<days;i++){
			String date=DateUtil.addDate(jfrq, StringUtil.toInt(i));
			String cMonth=DateUtil.formatMonth(DateUtil.parseDate(date));
			if(currentMonth.equals(cMonth)){
				delayDay++;
			}
		}
		return delayDay;
	}
	
	
}
